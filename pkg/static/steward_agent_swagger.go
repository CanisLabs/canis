package static

import (
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
)

type staticFilesFile struct {
	data  string
	mime  string
	mtime time.Time
	// size is the size before compression. If 0, it means the data is uncompressed
	size int
	// hash is a sha256 hash of the file contents. Used for the Etag, and useful for caching
	hash string
}

var staticFiles = map[string]*staticFilesFile{
	"steward_agent.swagger.json": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xff\xec\\mo\xe36\xf2\u007f\x9fO1\u007f\xfd\x0f\xd8\xe4ꓳi\xd1\x17)\x02\\\xbaOM\x91\xee\x06yxqX\x05\t%\x8d,v)RKRɪ\x8b|\xf7Ð\x92-ۊc'm\xafN\xbd\xc0¶\xc8\x19\xfef\xe6\xc7ᐒ\xf2u\v 0\xb7l4B\x1d\xecC\xb0\x17\xee\x06\x03\xba\xc6e\xa6\x82}\xa0v\x80\xc0r+\x90\xda_1\xc9\r\x1c\xa6\x05\x97pxr\xe4\xfa\x02\x047\xa8\rW\x92z솻\xe1\xcb`\v\xe0\xce\xe9I\x944U\x81&؇\x8f\xbe/+K\xc1\x13f\xb9\x92\xc3_\x8d\x92\xd4\xf7\xd2\xf5-\xb5J\xabdɾ\xcc\xe6f\x02p\xc8F(\xed\xe4\x02@0B\xdb\xf9\t\x10\xa8\x12\xb5Su\x94\x12Pg\xc4\xd517\xf6\x90d\x1bS\\O\x8d\xa6TҠ\x99R\x00\x10\xec\xed\xee\xce\\\x02\bR4\x89\xe6\xa5m\x1cp\b\xa6J\x124&\xab\x04\xb4\x9a\u008ez'd\x92\x1c\v6\xa7\f \xf8\x87ƌ\xf4\xfc\xff0ŌKNz\xcd\xd0X\xbce:\x1d\xc3=m\x14\aS\xe2w\x9d_w\xdd\x11\x83\x143V\t\xfb0z\t\x95\xc4/%&\x16S@\xad\x95\x1e\x1b\xf1T\x1bt%-/\xf0\r)]\x80{\xabǂ\xa0d\x9a\x15hQO\xd8\xe1\xff͘#Y\xe1\x88j,\xd3v\x160w&~\xaeP׳M\x1a?W\\#1#c\xc2\xe0L\xb3\xad\xcbF\xad\xe6r4+\x9c)]0\xf2m\xc0\xa5\xfd\xfe\xbb\xe0\xbe(܃\xb5d#\xbc2\xfc7\\\x13\xbc\xee\xf3\x8f\x82\xda˄\xcb\x0e\x13,\x1b\xcdr\xc0\xcf\xe5\x89\xe8\xe5\u058c1A\xa9\xcc2\xd9\xe0\x95Ffq\x8d\xf2A\a\xf0\xdf-#\xac\u0083\xad\x8ep\xbbV\f\xbf\xbaϐ\xa7w\xddecI\xa6\\\x94\xe9z1\xa5\x03x\xb3v,\xceo-/\xfas\x1cU\x1e\vR\x9c\xd5՟\x99\xe1\x160\xfb\x8a\xa7wC.o\xb8eM\x84V\xac\x8dޡ=\x1a\x8b\xbfUz\x8d\xd8\xee\xa0\x1eIޢ\xdfP~\t\xca_=\x0f\xcak\x1cqc\xdd~fլ~ڈ\x9eT\xb1\xe0\xc9\xeb\xa3\xd7\xeb\xc1\xf61\xdc\r͟;\xcdg\xaa\x95\xa5\x13\xf9\x1a\xe5\xee\x16\xed\x86̋ɼ\x1e4\x1eo\xc1R\x14hq\t\xb6\xbev\x1d\u05c8\xb0\x1d\xc0\x1b\xce>\a\xceޛz\x87\x82U2\xc9\x1fQY\x1c;\xc1u:i\x9c\x00ސ\xfay\x93\xda\xe4\x95Mխ|\x04\xad\xcf\x1a\xd15\"\xf6\x14\xe4\r\xb5\x9f\x1f\xb5\xe7\xfc\xb9\u00ad\xa03/\xbb6\xf7\x82<\xde\r\x8b77\x83\x9e\xfd͠%\xb0\xb4\xb7\xa1\x9f\xf1\xbd\xa9uJP]ě\xbbS\xab-_\x8f?\xe9Y'\x86\x8c\xe1nV\xb0\xbf\xf3Y\xcf:Q\xb6\x8bx\xc3\xda\xe7\xba{\x18~\xf5\x9fOz:`\x9dh\xddE\xbc\xa1\xf5\x03ۉ\x96\x1a\xeb\xc3\xee\xf1\xf3\x98\x1d\x9fM\x9e\x9e,\xb5\xb2*\xae\xb2CYw\xc9\xde\xc2R\xf1\xaf\x98L\xf6OԽDm\xf9\f\x8d]\xff\xabJ\x8bYr/\xd8\u007f\xccs\xfc\xe2\xf4x\xa8ѨJ'\b\xe4q\xb09\xb3PI\xfe\xb9BQ\x03OQZ\x9eq4`s\x04\xd2\r*s\xdf\rj\xce\x04\xff\r\xd3H:\x93\x12% \xae\xb2\f5\x14h\f\x1ba\b\xe79\x82`Ƃ\xc1Q\x81Ҷ\xc2\x17\xa7\xc7/\fP젨\x8c\x05\x8d\xa5F\x83\xd2F\x92\x9a\xb3J\x88\x1a>WL\xd0ةGֈ:\f\xdb\xcc\x00\x97\x91\xbc&\x15ÑR#\x81a\xeb\xd8\xf0u\xe5\x93\xc4\xf5\x8eG\xe0\xc4M\xae*\x91B\x8c\xc0%0H\x98T\x92'L\x00m\xc9\"\xb9\x8d\xe1(\x1c\x80@\x96r9\x82(\b\xa3\x00\xb8\x01\xa9,\xb0$\xc1\xd2b\xba\x13F2\x92G\x12J\xcd\x12\xcb\x13\x1c\x80EV\x18\xa8L\xc5\bq\xa91QE\xc9\x05\rb\x95\xc3\x1bs\xc9t\rL\b\a\xddx\x0f\xdb\x1c먙\x9e\xc0-X\x05\x95q\xd0H&Q\xd2\xe2\x17\xe7\xadCY\x87\xf0\x93\xba\xc5\x1b\xd4\x03\xc2J\xbe3p\x9b\xf3$w\"6\xc7H\xbaI\x82p\x9d[[^\x0f\xfc\xa7\xb9\x1e\x80\xd2 \x15\xf8\xd6\x01(\x89d7(\xc7\x00\x87ؠ\x85\xaa\x04\xe6\xb0EҠ\xbeA\xed!\x16\xac4\xde\xdbnD\xabڰB\x87\xd6\xc0\fdJ\buk\xf6\xc99\xff\x84\xa3l2$9\xb0\xd4ꆧ\x98\x8eQ\xd1EfLU`\x1a\x92\xc0\xa1\x84\x9f\xce\xcfO\xe0ݛsP\xb2\xa5\x87\xe7E\xcdQ\xa4\xc0\xe0\xe3l\x88\xcf\xeb\x12/?^F\x12\xe0\x86\x89\xcay\xae\xf1\xb4\xdfb;ۛg\x9c\x81I\x9f\x00\xfdx\x93ǜ\r0\x8d\x14\x1au\x8b)Y\x98\xb0\x84\x18\xabԧ\xaa\xa4lY\tk f\x06\xd3\x06\x1a\rxqz\xec\xb4\xe7\xecƹ\xbf\xe8\xc4=\xf5\x81g-\x18\xfa~\xa3x\nL\xd6$\xebU;Zj̔\xc6Aۓ\x140\xcbc.\xb8\xadA\"\xa6\xce\xe71\x82\x9b\x1a\xfa\x86&\x1a\x10\x8c$gr\x84\xae\xd51*\x84\xed\v\x83\xd0\xec\xc7\xc9\x10\n\x1a\x91\xdeG\x8dI6r\xc0c\x8d\xec\x13\xb1\xbb\xd1\x10\xeeP\xc8\xde+\x8b\xfb`sn \xabd\xe2\xa9A\x18\x1a\xf6'\x95\xd6(\xad\xa8\x81\xdd0.X,\xc6<UY\xc6\x13\xceD\x93\x01\xe2*\x03\x8d\x02\x99\xc1\x010\x99\x12\xb1\x1b%\x15\xb9\x90\xd8;!T\x8c#.%\xc1\xb9\xe56\x8f$\xb5\x84>ά\xe4&LT\xe1\xe6\x9b[&р\xb2\xb9\xa7\xa6\x9c\xe59l\x93\xe2\x1c\x01\x8b\xd2\xd6\r\xf7v\xa0\xe0\xa3\xdcB\x8c\x91t\xa3\xd3(\xc0\x8bR e\"\x17\u007f0%&<\xe3\t\x18,\x98\xb4<1aлj9\x92\xad\x92j'\a=qmqa\x1a\xfe\x85\x98\x1e#0\xa22O;\x99\x15f\x13k\x93\x03Y\xacn\xb0\x05\xdf\x04\xbc\v\xbcg\x8b05\xe2\xf5\xa1\xac\xaf]\x96a\x9c&\x81\x04\xa6cn5\xf1p\xc1\xe8\xed\xfcgB5Q\x03\x16I\x9a\xac.a\xf8A\xe2\x85k\xc5xi\xa0Ȟ\xb4\xa4\x11<vc7\xb9\u0080\xa9\xcaRi\x97\x16K\x96|\x1aV\x92>(\x19\xfa\xe9nZ\x06\xfa\xe4\xad2\xa8\xac\x9f8-\x85\r\xcdP\x96\xa6\xdc\xf3\x19F(\xa9tt\bl\xaeR\xd3b#\x9d\xce\u007f\x84\xe8\xcd\x17F\x04\x81\x97\xfbpB\x03\x12\x89\x9b\xb1\xd9\xd8|.\xe1\xd57߸\xfe\xe4ܷJA\xa6\x14\x1c@\x18\x86?\xf8k\xa4\x94ɺ\xf9\xc5d\x1d\x92\xba\xb7Z\x15ۙR;\xcd\xf50\f\xfd\x17\x9e\xc16u\xbapC\x9d\xab\xed\xa8\xda\xdd\xdd\xfb\x9e\xba\xee\xc0Wߧ\xd3\xfd\xae\vu\xef\x01\xa8?\xb3\x1b\xb6\fV8pk\r)X\x88\x91\x9b\xed\xb7J\x85\x89`\xc6t\xd1y\xb5\xd4ã\xe8\xf4\xfa\xa1\x03\x1bZ\xdc\xdf>\x80\xfb\xa4\xb6\xb9\x92c\xe4^\xfd[\xa5\xb6Ð\xf2V\xe3W\x8fz{g\xda\xd1\u0380y\xfc\xd4|\xe4\xe1\xbf~s\xf6\xea\xf4\xe8\xe4\xfc\xc3\xe9\xce~k\xc1$\x02\x1d\xf9FC\a\xf8w\x0f\x00\u007f\xa7Z\xcc\x0e\xf4\xfe\x01\xf8h\x96q\xf8V\xa9\xafa\x18\xde5\xcdL\xd6\x03Z\x98\xa8O\xe9S\xf9/L\x9b\x9c\t\xb2\xa9\x83alD\xaf\xc6V\x1d\xcff\x94]\xc8b\xa2\xce\r\xe6\x02\xebz\xfd\xdf\x01H.&\xe1\xeb\x8c\xe1\xe2Du\x93\xb3\xad\x9d.\xed:\x0eq\r\xe5\xecĽ\xe5BPC\xb39\xa1t\x1f\xc9\x17=\x19}H\xa5]\xe8\x1ah\x81zA\xf5\xc38[P&!\xaf\xd2\x05\xef\xd9H\x8eg\xab\x14u[\xef\xccՇ\xe3\x05\x0fXfѯ\x05\xae\xec|1|\x11\xc9&U\xb4C\xf8*\n\x9bhFA\xa6T\x183\xed\xd0}\x19\xd6\xe1oQ\xe0\xed\xf1Ň/\x8c\x9c\xf2(p\xad\x8e\x0e\x91\xfc\xf9\xec\xc3\xfbH\x1e\x1c\x1c\x1cxo\xd1\xefI!\xeb\xd7\x17E\xa4\x03\x9fn}\x9dR\x99&?j\x1cU\x82\xe9H\u038bPs\x8a\x93\xa49\x00,bL\xd3I\xfa\x1c4\xd9WF\xb2\x93\xe32\a\xf8\xfa\xdf\x04\xf9\xba)\x11\xc7I\xbe낰%\xf3~KUr6\xf1wRge\\`3q[r\x9f\xa06JN8\xe3\xd7=ȸ6\xf6\xcay\xe8\x00^\xfe0\xd3Jqh\x1b\xf7\xa62\x01\xed\xf9\xda\xceQ\xe0PG\xc1>DA\x1fo\xa6\x81\x85\x1eJ\x14\f&\n\x1c\x8c\xf7\xac\xf0J\xaa\xdd\xddo\x13\x0f\xc1}\xc7NO\x82t\u007f\xc7\x0eģ\xac)+\xa6\xbd\xef\xfd\xc8\rܢ\x10\xff\xfa$խt\xbc͙\xa1\x9dEe\xac*\xc0\xd3c:\xb8\x03\xbfP\xceD\xdcO\x9e\xce0\x14R9\x02\xe6\x03\x1a\xc9kG\x9d6\xa2\xb9\x12\xa9\x0fgg$\xb7\xa9i\x98\x00\xcdΣ!B$\x9d\x9aq\xcca\x9b\xf8ߚ\xf2\xf1\xbe\xcd\xd3\xe5\xc7˝\xfd\xa7\xc4iZ\xddT\xa8\x9c=^\xc7\xcbp\xef垉\x82\xc6\xeb\xc1\xd4\xf9\xd0\xd49\xc3\x13\xf6\xca8\xa3`\xe19@\xb7\xecKTzo\xd5ǥ\xc5\x11\xea\xfb\xca>.\xed\xb7{\xfdZ\x1b\xdf?\x06P\x8a\x96qa\xee\x13eZ\xb3\xe9\xdbn\x01\xb7X\x98\xf9Ӣ\xfe\x83\x9d\xee\xd9D\xffIN\xef9^\xf7=\x80\xa7ĉ\xa7\x8f\xf1IsR\xb4\xb2\x1c3\x86\x8f$\xa6W\xfe\x88\xe9\xeaq\xa3\xa3L\x956\xb4+\x9a\xe8\xf9\x1d\xe2\xb3\xcc)\xd5\xc3\xc1\xe8{)\xe3\t\xf1\x89UZ/\xed\xa3\x85\xe0\xac\xd5<\xae\xec\x93\xd0<6\xeeM\x9f)\xb9\xc5ﷴh\xcfIrE\vϧG\xbbo\xd3\x18\xa0\xac\x8a\xa9c\xc6\xe0\xec\xfc\xf4\xe8\xfd\xbb\xee\x89\xf6\xfb\x8b_~|sڽ\xf2\xe1ǟ\u07fc:\xef^9<==\xfcO\xf7\u008f\x1f>\x1cO+9>n\x8d\xb8\xec\xec\x10\xdbc\xe5v\xdc>\xab\xfaހ\xfcs\xe6\xfb\"_\xf7\xde\xfa\xfe\xdf\xc3\xea{R\xf9~T\xf7kXڰ>\x15s\xcf\xf7?\xc1/l&\xbf/\xf9fؒ\ue6bf=\xfd\x04\xa8\xbdw4\x1exTы,\a\xb6\xef\x81\xdd\xd5\x023\xff\xc7\x05\x9e`n\xa2\xaa\xf9\xc8,w<5\xf3\x1c\xd2\xd4\x029\xfbg\x1e~\xd7Z\xa3\x9f\"K\xafo=\x0f\xe4\xfd\xe5\x1c\xd8\xcf\xc2\xdfف\xb3\xbc]ڃ\xf3/\xb2\xad\xc6\u0cf9G?\xff\xda\xf5\xde\xe4怜^*\xb6\xab\xf9\x1f>\x1bƅ\xd1\xea\xf1\xec\u007f\xd6z\xb5\x98\xf6\xbd\xb8\xfe\x18\r+\xaeY[\xf4\xffn\xeb\xbf\x01\x00\x00\xff\xff \xc7\xf0\v!G\x00\x00",
		hash:  "d4d81bae0b00fbd802e534ddb27e4bc87d2c6047e837b11bf5b54dff01bb2388",
		mime:  "application/json",
		mtime: time.Unix(1592498724, 0),
		size:  18209,
	},
}

// NotFound is called when no asset is found.
// It defaults to http.NotFound but can be overwritten
var NotFound = http.NotFound

// ServeHTTP serves a request, attempting to reply with an embedded file.
func ServeHTTP(rw http.ResponseWriter, req *http.Request) {
	path := strings.TrimPrefix(req.URL.Path, "/")
	f, ok := staticFiles[path]
	if !ok {
		if path != "" && !strings.HasSuffix(path, "/") {
			NotFound(rw, req)
			return
		}
		f, ok = staticFiles[path+"index.html"]
		if !ok {
			NotFound(rw, req)
			return
		}
	}
	header := rw.Header()
	if f.hash != "" {
		if hash := req.Header.Get("If-None-Match"); hash == f.hash {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("ETag", f.hash)
	}
	if !f.mtime.IsZero() {
		if t, err := time.Parse(http.TimeFormat, req.Header.Get("If-Modified-Since")); err == nil && f.mtime.Before(t.Add(1*time.Second)) {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("Last-Modified", f.mtime.UTC().Format(http.TimeFormat))
	}
	header.Set("Content-Type", f.mime)

	// Check if the asset is compressed in the binary
	if f.size == 0 {
		header.Set("Content-Length", strconv.Itoa(len(f.data)))
		io.WriteString(rw, f.data)
	} else {
		if header.Get("Content-Encoding") == "" && strings.Contains(req.Header.Get("Accept-Encoding"), "gzip") {
			header.Set("Content-Encoding", "gzip")
			header.Set("Content-Length", strconv.Itoa(len(f.data)))
			io.WriteString(rw, f.data)
		} else {
			header.Set("Content-Length", strconv.Itoa(f.size))
			reader, _ := gzip.NewReader(strings.NewReader(f.data))
			io.Copy(rw, reader)
			reader.Close()
		}
	}
}

// Server is simply ServeHTTP but wrapped in http.HandlerFunc so it can be passed into net/http functions directly.
var Server http.Handler = http.HandlerFunc(ServeHTTP)

// Open allows you to read an embedded file directly. It will return a decompressing Reader if the file is embedded in compressed format.
// You should close the Reader after you're done with it.
func Open(name string) (io.ReadCloser, error) {
	f, ok := staticFiles[name]
	if !ok {
		return nil, fmt.Errorf("Asset %s not found", name)
	}

	if f.size == 0 {
		return ioutil.NopCloser(strings.NewReader(f.data)), nil
	}
	return gzip.NewReader(strings.NewReader(f.data))
}

// ModTime returns the modification time of the original file.
// Useful for caching purposes
// Returns zero time if the file is not in the bundle
func ModTime(file string) (t time.Time) {
	if f, ok := staticFiles[file]; ok {
		t = f.mtime
	}
	return
}

// Hash returns the hex-encoded SHA256 hash of the original file
// Used for the Etag, and useful for caching
// Returns an empty string if the file is not in the bundle
func Hash(file string) (s string) {
	if f, ok := staticFiles[file]; ok {
		s = f.hash
	}
	return
}
